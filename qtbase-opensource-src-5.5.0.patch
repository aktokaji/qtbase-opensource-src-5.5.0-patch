 src/corelib/io/qprocess.cpp                  | 12 ++++++++++++
 src/corelib/io/qprocess.h                    |  2 ++
 src/corelib/io/qprocess_p.h                  |  1 +
 src/corelib/io/qprocess_win.cpp              |  2 +-
 src/network/access/qnetworkaccessmanager.cpp |  8 +++++++-
 src/network/access/qnetworkaccessmanager.h   |  3 +++
 src/network/access/qnetworkreplyhttpimpl.cpp | 11 ++++++++++-
 src/network/access/qnetworkreplyhttpimpl_p.h |  6 +++++-
 8 files changed, 41 insertions(+), 4 deletions(-)

diff --git a/src/corelib/io/qprocess.cpp b/src/corelib/io/qprocess.cpp
index 1842541..affa266 100644
--- a/src/corelib/io/qprocess.cpp
+++ b/src/corelib/io/qprocess.cpp
@@ -1508,6 +1508,18 @@ void QProcess::setNativeArguments(const QString &arguments)
     d->nativeArguments = arguments;
 }
 
+QString QProcess::nativeProgram() const
+{
+    Q_D(const QProcess);
+    return d->nativeProgram;
+}
+
+void QProcess::setNativeProgram(const QString &program)
+{
+    Q_D(QProcess);
+    d->nativeProgram = program;
+}
+
 #endif
 
 /*!
diff --git a/src/corelib/io/qprocess.h b/src/corelib/io/qprocess.h
index 078217e..2f1cf79 100644
--- a/src/corelib/io/qprocess.h
+++ b/src/corelib/io/qprocess.h
@@ -164,6 +164,8 @@ public:
 #if defined(Q_OS_WIN)
     QString nativeArguments() const;
     void setNativeArguments(const QString &arguments);
+    QString nativeProgram() const;
+    void setNativeProgram(const QString &program);
 #endif
 
     QString workingDirectory() const;
diff --git a/src/corelib/io/qprocess_p.h b/src/corelib/io/qprocess_p.h
index f6bd64f..7641215 100644
--- a/src/corelib/io/qprocess_p.h
+++ b/src/corelib/io/qprocess_p.h
@@ -329,6 +329,7 @@ public:
     QStringList arguments;
 #if defined(Q_OS_WIN)
     QString nativeArguments;
+    QString nativeProgram;
 #endif
     QProcessEnvironment environment;
 
diff --git a/src/corelib/io/qprocess_win.cpp b/src/corelib/io/qprocess_win.cpp
index cef961e..8f8b16e 100644
--- a/src/corelib/io/qprocess_win.cpp
+++ b/src/corelib/io/qprocess_win.cpp
@@ -499,7 +499,7 @@ void QProcessPrivate::startProcess()
                                  0, 0, 0,
                                  stdinChannel.pipe[0], stdoutChannel.pipe[1], stderrChannel.pipe[1]
     };
-    success = CreateProcess(0, (wchar_t*)args.utf16(),
+    success = CreateProcess(nativeProgram.isEmpty() ? 0 : (wchar_t*)nativeProgram.utf16(), (wchar_t*)args.utf16(),
                             0, 0, TRUE, dwCreationFlags,
                             environment.isEmpty() ? 0 : envlist.data(),
                             workingDirectory.isEmpty() ? 0 : (wchar_t*)QDir::toNativeSeparators(workingDirectory).utf16(),
diff --git a/src/network/access/qnetworkaccessmanager.cpp b/src/network/access/qnetworkaccessmanager.cpp
index e878feb..d5b6ebc 100644
--- a/src/network/access/qnetworkaccessmanager.cpp
+++ b/src/network/access/qnetworkaccessmanager.cpp
@@ -1109,6 +1109,12 @@ QNetworkReply *QNetworkAccessManager::createRequest(QNetworkAccessManager::Opera
                                                     const QNetworkRequest &req,
                                                     QIODevice *outgoingData)
 {
+    return createRequestEx(op, req, outgoingData);
+}
+QNetworkReply *QNetworkAccessManager::createRequestEx(Operation op, const QNetworkRequest &req,
+                                                      QIODevice *outgoingData,
+                                                      const QString &realHost, int realPort)
+{
     Q_D(QNetworkAccessManager);
 
     bool isLocalFile = req.url().isLocalFile();
@@ -1206,7 +1212,7 @@ QNetworkReply *QNetworkAccessManager::createRequest(QNetworkAccessManager::Opera
         || scheme == QLatin1String("https") || scheme == QLatin1String("preconnect-https")
 #endif
         ) {
-        QNetworkReplyHttpImpl *reply = new QNetworkReplyHttpImpl(this, request, op, outgoingData);
+        QNetworkReplyHttpImpl *reply = new QNetworkReplyHttpImpl(this, request, op, outgoingData, realHost, realPort);
 #ifndef QT_NO_BEARERMANAGEMENT
         connect(this, SIGNAL(networkSessionConnected()),
                 reply, SLOT(_q_networkSessionConnected()));
diff --git a/src/network/access/qnetworkaccessmanager.h b/src/network/access/qnetworkaccessmanager.h
index 988eafa..3c66b65 100644
--- a/src/network/access/qnetworkaccessmanager.h
+++ b/src/network/access/qnetworkaccessmanager.h
@@ -158,6 +158,9 @@ Q_SIGNALS:
 protected:
     virtual QNetworkReply *createRequest(Operation op, const QNetworkRequest &request,
                                          QIODevice *outgoingData = 0);
+    virtual QNetworkReply *createRequestEx(Operation op, const QNetworkRequest &request,
+                                           QIODevice *outgoingData = 0,
+                                           const QString &realHost ="", int realPort = -1);
 
 protected Q_SLOTS:
     QStringList supportedSchemesImplementation() const;
diff --git a/src/network/access/qnetworkreplyhttpimpl.cpp b/src/network/access/qnetworkreplyhttpimpl.cpp
index c445677..5eb7710 100644
--- a/src/network/access/qnetworkreplyhttpimpl.cpp
+++ b/src/network/access/qnetworkreplyhttpimpl.cpp
@@ -159,7 +159,8 @@ static QHash<QByteArray, QByteArray> parseHttpOptionHeader(const QByteArray &hea
 QNetworkReplyHttpImpl::QNetworkReplyHttpImpl(QNetworkAccessManager* const manager,
                                              const QNetworkRequest& request,
                                              QNetworkAccessManager::Operation& operation,
-                                             QIODevice* outgoingData)
+                                             QIODevice* outgoingData,
+                                             const QString &realHost, int realPort)
     : QNetworkReply(*new QNetworkReplyHttpImplPrivate, manager)
 {
     Q_D(QNetworkReplyHttpImpl);
@@ -172,6 +173,8 @@ QNetworkReplyHttpImpl::QNetworkReplyHttpImpl(QNetworkAccessManager* const manage
 #ifndef QT_NO_SSL
     d->sslConfiguration = request.sslConfiguration();
 #endif
+    d->realHost = realHost;
+    d->realPort = realPort;
 
     // FIXME Later maybe set to Unbuffered, especially if it is zerocopy or from cache?
     QIODevice::open(QIODevice::ReadOnly);
@@ -771,6 +774,12 @@ void QNetworkReplyHttpImplPrivate::postRequest()
 
     // Set the properties it needs
     delegate->httpRequest = httpRequest;
+    if (!realHost.isEmpty() || realPort >= 0) {
+        QUrl url = delegate->httpRequest.url();
+        if (!realHost.isEmpty()) url.setHost(realHost);
+        if (realPort >= 0) url.setPort(realPort);
+        delegate->httpRequest.setUrl(url);
+    }
 #ifndef QT_NO_NETWORKPROXY
     delegate->cacheProxy = cacheProxy;
     delegate->transparentProxy = transparentProxy;
diff --git a/src/network/access/qnetworkreplyhttpimpl_p.h b/src/network/access/qnetworkreplyhttpimpl_p.h
index b009092..9db7d3e 100644
--- a/src/network/access/qnetworkreplyhttpimpl_p.h
+++ b/src/network/access/qnetworkreplyhttpimpl_p.h
@@ -75,7 +75,7 @@ class QNetworkReplyHttpImpl: public QNetworkReply
 {
     Q_OBJECT
 public:
-    QNetworkReplyHttpImpl(QNetworkAccessManager* const, const QNetworkRequest&, QNetworkAccessManager::Operation&, QIODevice* outgoingData);
+    QNetworkReplyHttpImpl(QNetworkAccessManager* const, const QNetworkRequest&, QNetworkAccessManager::Operation&, QIODevice* outgoingData, const QString &realHost, int realPort);
     virtual ~QNetworkReplyHttpImpl();
 
     void close() Q_DECL_OVERRIDE;
@@ -217,6 +217,10 @@ public:
     QIODevice *cacheSaveDevice;
     bool cacheEnabled; // is this for saving?
 
+    // host name redirect
+    QString realHost;
+    int realPort;
+
 
     QUrl urlForLastAuthentication;
 #ifndef QT_NO_NETWORKPROXY
